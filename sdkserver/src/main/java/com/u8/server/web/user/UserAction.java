package com.u8.server.web.user;import com.u8.server.cache.SDKCacheManager;import com.u8.server.common.UActionSupport;import com.u8.server.constants.StateCode;import com.u8.server.data.*;import com.u8.server.sdk.ISDKScript;import com.u8.server.sdk.ISDKScriptExt;import com.u8.server.sdk.ISDKVerifyListener;import com.u8.server.sdk.SDKVerifyResult;import com.u8.server.service.*;import com.u8.server.utils.UGenerator;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.apache.struts2.convention.annotation.Action;import org.apache.struts2.convention.annotation.Namespace;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import java.util.Date;/*** * 用户登录 */@Controller@Namespace("/user")public class UserAction extends UActionSupport{    private static Logger log = Logger.getLogger(UserAction.class.getName());    private int appID;    private int channelID;    private String extension;    private String userID;    private String token;    private String sign;            //签名    private String openid;            //强哥传过来的openid，即第三方id    private String uniqueSerial;            //强哥传过来的包体标识号    @Autowired    private UGameManager gameManager;    @Autowired    private UChannelManager channelManager;    @Autowired    private UUserManager userManager;    @Autowired    private UUserLoginLogManager userLoginLogManager;    @Autowired    private UChannelLoginTypeManager loginManager;    @Autowired    private LogDataManager mLogDataManager;    @Action("getToken2")    public void getLoginToken2() {        log.debug("getToken...");        String method = this.request.getMethod();        log.debug("getToken..."+this.sign);    }    @Action("getToken")    public void getLoginToken(){        log.debug("-------->getLoginToken...");        try{            final UGame game = gameManager.queryGame(this.appID);            if(game == null){                renderState(StateCode.CODE_GAME_NONE, null);                log.error("-------->game is null...appID:"+appID) ;                return;            }            final UChannel channel = channelManager.queryChannel(this.channelID);            if(channel == null){                renderState(StateCode.CODE_CHANNEL_NONE, null);                log.error("-------->channel is null...channelID:"+channelID);                return;            }            if(channel.getAppID() != this.appID){                renderState(StateCode.CODE_CHANNEL_NOT_MATCH, null);                log.error("-------->appId is not right...appID:"+appID+", channelAppId:"+channel.getAppID());                return;            }            UChannelMaster master = channel.getMaster();            if(master == null){                renderState(StateCode.CODE_CHANNEL_NONE, null);                log.error("-------->UChannelMaster is null...master:"+channel.getMaster());                return;            }            StringBuilder sb = new StringBuilder();            sb.append("appID=").append(this.appID)                    .append("channelID=").append(this.channelID)                    .append("extension=").append(this.extension).append(game.getAppkey());            log.debug("-------->getToken's sign :" + sb.toString());            if(!userManager.isSignOK(sb.toString(), sign)){                log.error("-------->the sign is invalid. sign:"+sign);                renderState(StateCode.CODE_SIGN_ERROR, null);                return;            }            ISDKScript verifier = SDKCacheManager.getInstance().getSDKScript(channel);            if(verifier == null){                log.error("-------->the ISDKScript is not found . channelID:"+channelID);                renderState(StateCode.CODE_VERIFY_FAILED, null);                return;            }            log.debug("-------->The auth url is "+channel.getChannelAuthUrl());            log.debug("-------->channel is "+channel.getChannelID()+";extension is "+extension);            ISDKVerifyListener callback = new ISDKVerifyListener() {                @Override                public void onSuccess(SDKVerifyResult sdkResult) {                    try{                        log.debug("-------->user verify success. userId:"+sdkResult.getUserID()+", isSuccess:"+sdkResult.isSuccess()+", username:"+sdkResult.getUserName()+", extendtion:"+sdkResult.getExtension());                        if(sdkResult.isSuccess() && !StringUtils.isEmpty(sdkResult.getUserID())){                            UUser user = userManager.getUserByCpID(channel.getAppID(), channel.getChannelID(), sdkResult.getUserID());                            if(user == null){                                user = userManager.generateUser(channel, sdkResult);                                log.debug("-------->user verify generation.user:"+user.toJSON());                                UStatistics statistics = mLogDataManager.getStatisticsByAppId(channel.getAppID());                                if (null == statistics) {                                    log.error("-------->The getToekn user statistics is null,channel's appid:"+channel.getAppID());                                    renderState(StateCode.CODE_AUTH_FAILED, null);                                }                                String token = LogDataManager.getToken();                                String registerCode = mLogDataManager.logRegisterData(statistics.getCid(),user, token);                                log.info("-------->logRegisterData ,code:"+registerCode);                                if ("401".equals(registerCode)) {                                    String twiceToken = mLogDataManager.getLogToken(statistics.getCid(), statistics.getUserName(), statistics.getPassword());                                    LogDataManager.setToken(twiceToken);                                    String twiceRegisterCode = mLogDataManager.logRegisterData(statistics.getCid(), user, twiceToken);                                    log.info("-------->logRegisterData ,twiceRegisterCode:"+twiceRegisterCode+", twiceToken:"+twiceToken);                                }                            }else{                                user.setChannelUserName(sdkResult.getUserName() == null ? "" : sdkResult.getUserName());                                user.setChannelUserNick(sdkResult.getNickName() == null ? "" : sdkResult.getNickName());                                user.setLastLoginTime(new Date().getTime() + "");                                log.debug("-------->user verify generation.user:"+user.toJSON());                            }                            user.setToken(UGenerator.generateToken(user, game.getAppSecret()));                            userManager.saveUser(user);                            UChannel channel = user.getChannel();                            //统计登录流水                            userLoginLogManager.generateUserLoginLog(user,sdkResult);                            JSONObject data = new JSONObject();                            data.put("userID", user.getId());                            data.put("sdkUserID", user.getChannelUserID());                            data.put("username", user.getName());                            data.put("sdkUserName", user.getChannelUserName());                            data.put("token", user.getToken());                            data.put("extension", sdkResult.getExtension());                            data.put("timestamp", user.getLastLoginTime());                            data.put("platID", (channel== null || channel.getPlatID()==null) ? 0 : channel.getPlatID());                            log.debug("-------->user verify success response data. data:"+data.toString());                            renderState(StateCode.CODE_SUCCESS, data);                        }else{                            log.error("-------->The user verify failed-1.");                            renderState(StateCode.CODE_AUTH_FAILED, null);                        }                    }catch (Exception e){                        log.error("-------->The user verify exception. msg:"+e.getMessage());                        renderState(StateCode.CODE_AUTH_FAILED, null);                        e.printStackTrace();                    }                }                @Override                public void onFailed(String errorMsg) {                    log.error("-------->The user verify failed-2. errorMsg:"+errorMsg);                    renderState(StateCode.CODE_AUTH_FAILED, null);                }            };            String clsName = verifier.getClass().getName();            if(clsName=="com.u8.server.sdk.multiChannel.MultiChannel"){                ISDKScriptExt scriptExt = (ISDKScriptExt)verifier;                scriptExt.verifyByType(channel,extension,loginManager,callback);                return;            }else{                verifier.verify(channel, extension,callback);            }        }catch (Exception e){            log.error("-------->"+e.getMessage());            renderState(StateCode.CODE_AUTH_FAILED, null);        }    }    private void renderState(int state, JSONObject data){        try{            JSONObject json = new JSONObject();            json.put("state", state);            json.put("data", data);            super.renderJson(json.toString());        }catch(Exception e){            e.printStackTrace();            log.error(e.getMessage());        }    }    /***     * 上面协议返回客户端之后，开始连接登录游戏服。游戏服可以调用该协议进行再次登录认证。     * 但是，该步骤是可选的。游戏服务器也可以自己验证token以及token的时效性，这样就不用来     * U8Server进行再次登录认证了。     *     * 服务器自己验证token，根据U8Server分配给每个游戏参数中的AppSecret，按照生成token的     * 规则，进行验证。同时，需要验证timestamp的时效性     *     */    @Action("verifyAccount")    public void loginVerify(){        try{            UUser user = userManager.getUser(Integer.parseInt(this.userID));            if(user == null){                log.error("-------->The user is null,userID:" + this.userID);                renderState(StateCode.CODE_USER_NONE, null);                return;            }            if(StringUtils.isEmpty(this.token)){                log.error("-------->The token is null");                renderState(StateCode.CODE_VERIFY_FAILED, null);                return;            }            StringBuilder sb = new StringBuilder();            sb.append("userID=").append(this.userID)                    .append("token=").append(this.token)                    .append(user.getGame().getAppSecret());            log.debug("-------->The loginVerify unsign str is:" + sb.toString()+", cp's sign:"+sign);            if(!userManager.isSignOK(sb.toString(), sign)){                log.error("-------->The loginVerify sign error:" + sb.toString() + ", cp's sign:" + sign);                renderState(StateCode.CODE_SIGN_ERROR, null);                return;            }            long now = System.currentTimeMillis();            if(!userManager.checkUser(user, token)){                log.error("-------->The loginVerify sign error:" + sb.toString()+", cp's sign:"+sign);                renderState(StateCode.CODE_TOKEN_ERROR, null);                return;            }            JSONObject data = new JSONObject();            data.put("userID", user.getId());            data.put("username", user.getName());            log.debug("-------->The loginVerify response str is:" + data.toString());            UStatistics statistics = mLogDataManager.getStatisticsByAppId(user.getAppID());            if (null == statistics) {                log.error("-------->The verifyAccount user statistics is null,user's appid:"+user.getAppID());                renderState(StateCode.CODE_VERIFY_FAILED, null);            }            String token =LogDataManager.getToken();            String loginCode = mLogDataManager.logLoginData(statistics.getCid(),user, token);            log.debug("-------->The logLoginData,code:" + loginCode);            if ("401".equals(loginCode)) {                String twiceToken = mLogDataManager.getLogToken(statistics.getCid(), statistics.getUserName(), statistics.getPassword());                LogDataManager.setToken(twiceToken);                String twiceLoginCode = mLogDataManager.logLoginData(statistics.getCid(), user, twiceToken);                log.info("-------->logLoginData ,twiceLoginCode:"+twiceLoginCode+", twiceToken:"+twiceToken);            }            renderState(StateCode.CODE_SUCCESS, data);            return;        }catch (Exception e){            log.error(e.getMessage());        }        renderState(StateCode.CODE_VERIFY_FAILED, null);    }    /***     * 上面协议返回客户端之后，开始连接登录游戏服。游戏服可以调用该协议进行再次登录认证。     * 但是，该步骤是可选的。游戏服务器也可以自己验证token以及token的时效性，这样就不用来     * U8Server进行再次登录认证了。     *     * 服务器自己验证token，根据U8Server分配给每个游戏参数中的AppSecret，按照生成token的     * 规则，进行验证。同时，需要验证timestamp的时效性     *     */    @Action("verifyAccountBybs")    public void loginVerifyBS(){        try{            UUser user = userManager.getUser(Integer.parseInt(this.userID));            log.debug("-------->The loginVerifyBS ,userID:" + this.userID+", uniqueSerial:"+uniqueSerial);            if(user == null&&StringUtils.isNotEmpty(uniqueSerial)){                log.debug("-------->The loginVerifyBS oldBsUser userID:" + this.userID);                String[] uniqueSerialArr = uniqueSerial.split("-");                log.debug("-------->The loginVerifyBS oldBsUser uniqueSerialArr:" + uniqueSerialArr.toString());                int appId = Integer.parseInt(uniqueSerialArr[1]);                int channelID = Integer.parseInt(uniqueSerialArr[0]);                //根据老包openid与包体识别号查询用户                user = userManager.getUserByCpID(appId, channelID, this.userID + "");                UChannel channel = new UChannel();                channel.setAppID(appId);                channel.setChannelID(channelID);                SDKVerifyResult sdkResult = new SDKVerifyResult();                sdkResult.setUserID(this.userID + "");                sdkResult.setUserName("");                sdkResult.setNickName("");                //根据识别号与openid查询不到用户                if (user == null) {                    user = userManager.generateUser(channel, sdkResult);                }                log.debug("-------->The loginVerifyBS oldBsUser:" + user.toJSON());                JSONObject data = new JSONObject();                data.put("userID", user.getId());                data.put("username", user.getName());                data.put("openid", user.getChannelUserID());                data.put("unionid", "");                log.debug("-------->The loginVerifyBS response str is:" + data.toString());                renderState(StateCode.CODE_SUCCESS, data);                return;                //renderState(StateCode.CODE_USER_NONE, null);                //return;            }            if(StringUtils.isEmpty(this.token)){                log.error("--------> The loginVerifyBS token is null");                renderState(StateCode.CODE_VERIFY_FAILED, null);                return;            }            StringBuilder sb = new StringBuilder();            sb.append("userID=").append(this.userID)                    .append("token=").append(this.token)                    .append("uniqueSerial=").append(uniqueSerial)                    .append(user.getGame().getAppSecret());            log.debug("-------->The loginVerifyBS unsign str is:" + sb.toString()+", cp's sign:"+sign);            if(!userManager.isSignOK(sb.toString(), sign)){                log.error("-------->The loginVerifyBS sign error:" + sb.toString() + ", cp's sign:" + sign);                renderState(StateCode.CODE_SIGN_ERROR, null);                return;            }            long now = System.currentTimeMillis();            if(!userManager.checkUser(user, token)){                log.error("-------->The loginVerify sign error:" + sb.toString()+", cp's sign:"+sign);                renderState(StateCode.CODE_TOKEN_ERROR, null);                return;            }            JSONObject data = new JSONObject();            data.put("userID", user.getId());            data.put("username", "");            data.put("openid", user.getChannelUserID());            data.put("unionid", "");            //微信unionid添加            if ("com.u8.server.sdk.multiChannel.MultiChannel".equals(user.getChannel().getChannelVerifyClass())) {                String nickName=user.getChannelUserName();                if (nickName.startsWith("WX")) {                    data.put("unionid", user.getChannelUserNick());                }            }            log.debug("-------->The loginVerifyBS response str is:" + data.toString());            UStatistics statistics = mLogDataManager.getStatisticsByAppId(user.getAppID());            if (null == statistics) {                log.error("-------->The verifyAccountBybs user statistics is null,user's appid:"+user.getAppID());                renderState(StateCode.CODE_VERIFY_FAILED, null);            }            String token =LogDataManager.getToken();            String loginCode = mLogDataManager.logLoginData(statistics.getCid(),user, token);            log.debug("-------->The logLoginData,code:" + loginCode);            if ("401".equals(loginCode)) {                String twiceToken = mLogDataManager.getLogToken(statistics.getCid(), statistics.getUserName(), statistics.getPassword());                LogDataManager.setToken(twiceToken);                String twiceLoginCode = mLogDataManager.logLoginData(statistics.getCid(), user, twiceToken);                log.info("-------->logLoginData ,twiceLoginCode:"+twiceLoginCode+", twiceToken:"+twiceToken);            }            renderState(StateCode.CODE_SUCCESS, data);            return;        }catch (Exception e){            log.error(e.getMessage());        }        renderState(StateCode.CODE_VERIFY_FAILED, null);    }    /**     * 宝石旧包不验证token     */    @Action("verifyAccountByOldBS")    public void loginVerifyOldBS(){        try{            log.debug("-------->The loginVerifyOldBS ,userID:" + this.userID+", uniqueSerial:"+uniqueSerial);            if(StringUtils.isEmpty(uniqueSerial)){                log.debug("-------->The loginVerifyOldBS oldBsUser uniqueSerial is null");                renderState(StateCode.CODE_VERIFY_FAILED, null);                return;            }            /*StringBuilder sb = new StringBuilder();            sb.append("userID=").append(this.userID)                    .append("uniqueSerial=").append(uniqueSerial)                    .append(user.getGame().getAppSecret());            log.debug("-------->The loginVerifyOldBS unsign str is:" + sb.toString()+", cp's sign:"+sign);            if(!userManager.isSignOK(sb.toString(), sign)){                log.error("-------->The loginVerifyOldBS sign error:" + sb.toString() + ", cp's sign:" + sign);                renderState(StateCode.CODE_SIGN_ERROR, null);                return;            }*/            String[] uniqueSerialArr = uniqueSerial.split("-");            log.debug("-------->The loginVerifyOldBS oldBsUser uniqueSerialArr:" + uniqueSerialArr[0]+","+uniqueSerialArr[1]);            int appId = Integer.parseInt(uniqueSerialArr[1]);            int channelID = Integer.parseInt(uniqueSerialArr[0]);            //根据老包openid与包体识别号查询用户            UUser user = userManager.getUserByCpID(appId, channelID, this.userID + "");            //根据识别号与openid查询不到用户            if (null == user) {                UChannel channel = new UChannel();                channel.setAppID(appId);                channel.setChannelID(channelID);                SDKVerifyResult sdkResult = new SDKVerifyResult();                sdkResult.setUserID(this.userID + "");                sdkResult.setUserName("");                sdkResult.setNickName("");                log.debug("-------->The loginVerifyOldBS oldBsUser generateUser");                user = userManager.generateOldBSUser(channel, sdkResult);            }            log.debug("-------->The loginVerifyOldBS oldBsUser user:"+user.toJSON());            JSONObject data = new JSONObject();            data.put("userID", user.getId());            data.put("username", "");            data.put("openid", user.getChannelUserID());            data.put("unionid", "");            //微信unionid添加            /*if ("com.u8.server.sdk.multiChannel.MultiChannel".equals(user.getChannel().getChannelVerifyClass())) {                String nickName=user.getChannelUserName();                if (nickName.startsWith("WX")) {                    data.put("unionid", user.getChannelUserNick());                }            }*/            log.debug("-------->The loginVerifyOldBS response str is:" + data.toString());            renderState(StateCode.CODE_SUCCESS, data);            return;        }catch (Exception e){            log.error(e.getMessage());        }        renderState(StateCode.CODE_VERIFY_FAILED, null);    }    public int getAppID() {        return appID;    }    public void setAppID(int appID) {        this.appID = appID;    }    public int getChannelID() {        return channelID;    }    public void setChannelID(int channelID) {        this.channelID = channelID;    }    public String getExtension() {        return extension;    }    public void setExtension(String extension) {        this.extension = extension;    }    public String getUserID() {        return userID;    }    public void setUserID(String userID) {        this.userID = userID;    }    public String getToken() {        return token;    }    public void setToken(String token) {        this.token = token;    }    public String getSign() {        return sign;    }    public void setSign(String sign) {        this.sign = sign;    }    public String getOpenid() {        return openid;    }    public void setOpenid(String openid) {        this.openid = openid;    }    public String getUniqueSerial() {        return uniqueSerial;    }    public void setUniqueSerial(String uniqueSerial) {        this.uniqueSerial = uniqueSerial;    }}